
1：抽象工厂角色(FruitsFactory)：
    是工厂方法模式的核心，与应用程序无关。任何在模式中创建的对象的工厂类必须实现这个接口。

2：具体工厂角色（AppleFactory）：
    这是实现抽象工厂接口的具体工厂类，包含与应用程序密切相关的逻辑，并且收到应用程序调用用来创建某一种产品对象
    简单工厂模式的核心，负责创建所有实例的内部逻辑，工厂类可以被外界直接调用，创建所需的产品对象

3：抽象产品角色（Fruits）：
    简单工厂模式所创建的所有对象的父类，它负责描述所有实例所共有的公共接口

4：具体产品角色（Apple）：
    实现了抽象产品所定义的接口，某个产品由具体的工厂创建，它们之间一一对应。


是对简单工厂的进一步的深化，不在提供一个统一的工厂用来生产所有的产品，而是针对每一个产品提供一个创建它的工厂，
将生产工厂的时机由父类延迟到了对应产品工厂类

优点：在简单工厂模式的情况下符合了开闭原则，再有新的产品，只需要扩展新产品对应的工厂即可
缺点：目前只是需要榨果汁，如果想要扩展新的产品功能，比如吃果肉，就会很难扩展，所以你需要factory-abstract
    以及抽象工厂和工厂模式的区别也会在抽象工厂中介绍。