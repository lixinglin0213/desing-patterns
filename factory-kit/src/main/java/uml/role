1：抽象工厂角色(FruitsFactory)：
    是工厂方法模式的核心，与应用程序无关。任何在模式中创建的对象的工厂类必须实现这个接口。

2：具体工厂角色（AppleFactory）：
    这是实现抽象工厂接口的具体工厂类，包含与应用程序密切相关的逻辑，并且收到应用程序调用用来创建某一种产品对象
    简单工厂模式的核心，负责创建所有实例的内部逻辑，工厂类可以被外界直接调用，创建所需的产品对象

3：抽象产品角色（Fruits）：
    简单工厂模式所创建的所有对象的父类，它负责描述所有实例所共有的公共接口

4：具体产品角色（Apple）：
    实现了抽象产品所定义的接口，某个产品由具体的工厂创建，它们之间一一对应。

理解抽象工厂和工厂方法的区别先理解两个概念

产品等级结构：
    可以理解为产品的集成结构，一个水果的父类，下面一堆苹果，橘子等。抽象的水果和具体的水果（苹果，橘子）构成了
    一个产品等级结构。
产品族：
    在抽象工厂模式中，产品族是指由同 一个工厂生产的位于不同产品等级结构中的一组产品，如水果工厂生产，水果汁，水果罐头等等。
    这些是在抽象工厂中已经定义好的



优点：隔离了具体类的生成，和客户端解耦。对于增加新的产品具体工厂和产品族很方便，符合开闭原则

缺点：在添加新的产品对象时，很难扩展抽象工厂来生产新种类的产品，因为在抽象工厂中角色规定了所有可能被创建的产品集合，要支持
    新种类的产品就意味着要对接口扩展，这将设计抽象工厂和子类的修改，带来很大的麻烦。

    这个缺点也是开闭原则的倾斜性，（增加新的工厂和产品族容易，增加新的产品等级结构麻烦）

